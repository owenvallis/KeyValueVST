/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Key_valueAudioProcessorEditor::Key_valueAudioProcessorEditor (Key_valueAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter),
      performerMidiInputSelectorA("PerformerA"),
      performerMidiInputSelectorB("PerformerB"),
      performerMidiInputSelectorALabel(" ", "MIDI Channel PerformerA"),
      performerMidiInputSelectorBLabel(" ", "MIDI Channel PerformerB"),      
      learning("Learning"),
      connectToIPC("Connect")

{
    
    for (int i = 1; i < 17; i++) 
    {        
        performerMidiInputSelectorA.addItem(String(i), i);        
        performerMidiInputSelectorB.addItem(String(i), i);
    }
    
    performerMidiInputSelectorALabel.attachToComponent (&performerMidiInputSelectorA, false);
    performerMidiInputSelectorALabel.setFont (Font (11.0f));
    
    performerMidiInputSelectorBLabel.attachToComponent (&performerMidiInputSelectorB, false);
    performerMidiInputSelectorBLabel.setFont (Font (11.0f));
    
    
    // textbutton for enabling/disabling learning
    learning.setClickingTogglesState(true);
    learning.setToggleState(false, false);
    
    // add listeners
    performerMidiInputSelectorA.addListener(this);
    performerMidiInputSelectorB.addListener(this);
    learning.addListener(this);
    connectToIPC.addListener(this);
    
    // add all our components
    addAndMakeVisible(&performerMidiInputSelectorA);
    addAndMakeVisible(&performerMidiInputSelectorB);
    addAndMakeVisible(&learning);
    addAndMakeVisible(&connectToIPC);
    
    
    
    // This is where our plugin's editor size is set.
    setSize (250, 130);
}

Key_valueAudioProcessorEditor::~Key_valueAudioProcessorEditor()
{
}

//==============================================================================
void Key_valueAudioProcessorEditor::paint (Graphics& g)
{

}

void Key_valueAudioProcessorEditor::resized()
{
    // hard set for right now
    performerMidiInputSelectorA.setBounds(10, 30, 100, 22);
    performerMidiInputSelectorB.setBounds(10, 80, 100, 22);
    learning.setBounds(130, 30, 100, 22);
    connectToIPC.setBounds(130, 80, 100, 22);
}

void Key_valueAudioProcessorEditor::comboBoxChanged (ComboBox *comboBoxThatHasChanged)
{
    if (comboBoxThatHasChanged == &performerMidiInputSelectorA)
    {
        getProcessor()->setMidiChannelPerformerA(performerMidiInputSelectorA.getSelectedId());
    }
    else if (comboBoxThatHasChanged == &performerMidiInputSelectorB)
    {
        getProcessor()->setMidiChannelPerformerB(performerMidiInputSelectorB.getSelectedId());
    }
}

void Key_valueAudioProcessorEditor::buttonClicked (Button* button)
{    
    if (button == &learning)
    {
        getProcessor()->setLearning(learning.getToggleState());
        
    } else if (button == &connectToIPC) {
                
        getProcessor()->connectToDataBus();
    }
}
